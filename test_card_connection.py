#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "Card is unresponsive" ‡πÅ‡∏•‡∏∞ "Unable to connect with protocol: T0 or T1"
"""

import sys
import time
from smartcard.System import readers
from smartcard.util import toHexString
from smartcard.Exceptions import NoCardException, CardConnectionException
from smartcard.pcsc.PCSCExceptions import EstablishContextException

def test_card_reader_detection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö card reader"""
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Card Reader ===")
    
    try:
        reader_list = readers()
        if not reader_list:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö card reader")
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
            print("1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ USB")
            print("2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á driver")
            print("3. PC/SC service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            return False
        
        print(f"‚úÖ ‡∏û‡∏ö card reader: {len(reader_list)} ‡∏ï‡∏±‡∏ß")
        for i, reader in enumerate(reader_list):
            print(f"  {i}: {reader}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö card reader: {e}")
        return False

def test_card_connection(reader_index=0):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£"""
    print(f"\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Card Reader {reader_index} ===")
    
    try:
        reader_list = readers()
        if reader_index >= len(reader_list):
            print(f"‚ùå Card reader index {reader_index} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
            return False
        
        reader = reader_list[reader_index]
        print(f"‡πÉ‡∏ä‡πâ card reader: {reader}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        max_attempts = 3
        for attempt in range(max_attempts):
            print(f"\n--- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° {attempt + 1}/{max_attempts} ---")
            
            try:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                connection = reader.createConnection()
                
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
                protocols = [None, 0, 1]  # Default, T0, T1
                protocol_names = ["Default", "T0", "T1"]
                
                connected = False
                for i, protocol in enumerate(protocols):
                    try:
                        print(f"  ‡∏•‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•: {protocol_names[i]}...")
                        
                        if protocol is None:
                            connection.connect()
                        else:
                            connection.connect(protocol)
                        
                        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        connected = True
                        print(f"  ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•: {protocol_names[i]}")
                        
                        # ‡∏≠‡πà‡∏≤‡∏ô ATR (Answer To Reset)
                        try:
                            atr = connection.getATR()
                            print(f"  üìã ATR: {toHexString(atr)}")
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£
                            if len(atr) >= 2:
                                if atr[0] == 0x3B and atr[1] == 0x67:
                                    print("  üé¥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£: ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢ (‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤)")
                                elif atr[0] == 0x3B and atr[1] == 0x79:
                                    print("  üé¥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£: ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢ (‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà)")
                                elif atr[0] == 0x3B and atr[1] == 0xF8:
                                    print("  üí≥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£: ‡∏ö‡∏±‡∏ï‡∏£ EMV (‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï)")
                                else:
                                    print(f"  ‚ùì ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£: ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö (ATR: {toHexString(atr)})")
                            
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô ATR ‡πÑ‡∏î‡πâ: {e}")
                        
                        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
                        test_thai_id_applet(connection)
                        
                        break
                        
                    except CardConnectionException as e:
                        print(f"  ‚ùå ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• {protocol_names[i]} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                        continue
                    except Exception as e:
                        print(f"  ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• {protocol_names[i]}: {e}")
                        continue
                
                if connected:
                    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    try:
                        connection.disconnect()
                        print("  ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    except:
                        print("  ‚ö†Ô∏è  ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    
                    print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}")
                    return True
                else:
                    print(f"  ‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    if attempt < max_attempts - 1:
                        print("  ‚è≥ ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                        time.sleep(3)
                    continue
                
            except Exception as e:
                print(f"  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
                if attempt < max_attempts - 1:
                    print("  ‚è≥ ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                    time.sleep(3)
                continue
        
        print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á {max_attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return False
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_thai_id_applet(connection):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"""
    print("  üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô...")
    
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏ó‡∏¢
    applet_commands = [
        # ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤
        [0x00, 0xA4, 0x04, 0x00, 0x08, 0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x01],
        # ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
        [0x00, 0xA4, 0x04, 0x00, 0x08, 0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x00],
        # ‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        [0x00, 0xA4, 0x04, 0x00, 0x08, 0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x02]
    ]
    
    applet_names = ["‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤", "‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà", "‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    
    for i, (cmd, name) in enumerate(zip(applet_commands, applet_names)):
        try:
            print(f"    ‡∏•‡∏≠‡∏á applet {name}...")
            response, sw1, sw2 = connection.transmit(cmd)
            
            if sw1 == 0x90 and sw2 == 0x00:
                print(f"    ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet {name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                test_basic_reading(connection)
                return True
            else:
                print(f"    ‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet {name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: SW1={sw1:02X}, SW2={sw2:02X}")
                
        except Exception as e:
            print(f"    ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö applet {name}: {e}")
            continue
    
    print("    ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å applet ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏î‡πâ")
    return False

def test_basic_reading(connection):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("    üìñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
    
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    read_commands = {
        "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô": [0x80, 0xB0, 0x00, 0x04, 0x02, 0x00, 0x0D],
        "‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢": [0x80, 0xB0, 0x00, 0x11, 0x02, 0x00, 0x64],
        "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î": [0x80, 0xB0, 0x00, 0xD9, 0x02, 0x00, 0x08]
    }
    
    for field_name, cmd in read_commands.items():
        try:
            data, sw1, sw2 = connection.transmit(cmd)
            
            if sw1 == 0x90 and sw2 == 0x00 and data:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TIS-620 ‡πÄ‡∏õ‡πá‡∏ô Unicode
                try:
                    value = bytes(data).decode('tis-620', errors='ignore').replace("#", " ").strip()
                    print(f"      ‚úÖ {field_name}: {value}")
                except:
                    print(f"      ‚úÖ {field_name}: {toHexString(data)} (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ)")
            else:
                print(f"      ‚ùå {field_name}: ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (SW1={sw1:02X}, SW2={sw2:02X})")
                
        except Exception as e:
            print(f"      ‚ùå {field_name}: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ===\n")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö card reader
    if not test_card_reader_detection():
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£
    if test_card_connection():
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        print("\nüí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:")
        print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏™‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("2. ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà")
        print("3. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£")
        print("4. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ card reader ‡∏≠‡∏∑‡πà‡∏ô")
        print("5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PC/SC service")
        print("6. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö")

if __name__ == "__main__":
    main()
