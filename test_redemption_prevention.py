#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# ‡πÉ‡∏ä‡πâ Python 2.7 compatible imports
try:
    from database import PawnShopDatabase
    from dialogs import RedemptionDialog
    from PySide6.QtWidgets import QApplication
    from PySide6.QtCore import QDate
except ImportError:
    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import modules ‡πÑ‡∏î‡πâ - ‡πÉ‡∏ä‡πâ Python 3.6+ ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies")
    sys.exit(1)

def test_redemption_prevention():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥"""
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥ ===")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á database instance
    db = PawnShopDatabase()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    print("\n1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô is_contract_redeemed:")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_contract_data = {
        'contract_number': 'TEST-001',
        'customer_id': 1,
        'product_id': 1,
        'pawn_amount': 1000.0,
        'fee_amount': 0.0,
        'total_paid': 1000.0,
        'total_redemption': 1000.0,
        'start_date': '2024-01-01',
        'end_date': '2024-01-31',
        'days_count': 30
    }
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        contract_id = db.create_contract(test_contract_data)
        print("   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö ID: {}".format(contract_id))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô
        is_redeemed_before = db.is_contract_redeemed(contract_id)
        print("   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô: {}".format('‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß' if is_redeemed_before else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô'))
        
        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô
        redemption_data = {
            'contract_id': contract_id,
            'redemption_date': '2024-01-15',
            'redemption_amount': 1000.0,
            'deposit_date': '2024-01-01',
            'due_date': '2024-01-31',
            'total_days': 14,
            'principal_amount': 1000.0,
            'fee_amount': 0.0,
            'penalty_amount': 0.0,
            'discount_amount': 0.0
        }
        
        redemption_id = db.redeem_contract(redemption_data)
        print("   ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô ID: {}".format(redemption_id))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô
        is_redeemed_after = db.is_contract_redeemed(contract_id)
        print("   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô: {}".format('‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß' if is_redeemed_after else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô'))
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô
        print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_contract_redemption_history:")
        redemption_history = db.get_contract_redemption_history(contract_id)
        print("   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô: {}".format(len(redemption_history)))
        
        for i, redemption in enumerate(redemption_history, 1):
            print("   {}. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {} ‡∏¢‡∏≠‡∏î: {:.2f} ‡∏ö‡∏≤‡∏ó".format(
                i, 
                redemption.get('redemption_date'), 
                redemption.get('redemption_amount', 0)
            ))
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {}".format(e))
    
    finally:
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        try:
            db.delete_contract(contract_id)
            print("\nüßπ ‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö ID: {} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢".format(contract_id))
        except:
            pass

def test_redemption_dialog():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö RedemptionDialog"""
    print("\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RedemptionDialog ===")
    
    app = QApplication(sys.argv)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_contract_data = {
        'id': 1,
        'contract_number': 'TEST-001',
        'customer_id': 1,
        'product_id': 1,
        'pawn_amount': 1000.0,
        'start_date': '2024-01-01',
        'end_date': '2024-01-31'
    }
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á RedemptionDialog
        dialog = RedemptionDialog(None, test_contract_data)
        print("   ‡∏™‡∏£‡πâ‡∏≤‡∏á RedemptionDialog ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô check_contract_status
        status_ok = dialog.check_contract_status()
        print("   ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {}".format('‡∏ú‡πà‡∏≤‡∏ô' if status_ok else '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'))
        
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö RedemptionDialog ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö RedemptionDialog: {}".format(e))

if __name__ == "__main__":
    test_redemption_prevention()
    test_redemption_dialog()
